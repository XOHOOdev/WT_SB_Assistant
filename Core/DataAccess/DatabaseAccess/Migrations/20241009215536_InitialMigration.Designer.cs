// <auto-generated />
using System;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WtSbAssistant.Core.DataAccess.DatabaseAccess;
using WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities;

#nullable disable

namespace WtSbAssistant.Core.DataAccess.DatabaseAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext<IdentityUser, ApplicationRole, string>))]
    [Migration("20241009215536_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationRolePermission", b =>
                {
                    b.Property<string>("PermissionsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RolesId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PermissionsId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("ApplicationRolePermission");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.Configuration", b =>
                {
                    b.Property<string>("Class")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Property")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Class", "Property");

                    b.ToTable("CF_Configurations");
                });

            modelBuilder.Entity("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.LogMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.Property<string>("ShortMessage")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ShortSource")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("LG_LogMessages");
                });

            modelBuilder.Entity("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.Permission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("US_Permissions");
                });

            modelBuilder.Entity("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.WtBattleRating", b =>
                {
                    b.Property<int>("UniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UniqueId"));

                    b.Property<decimal>("BattleRating")
                        .HasColumnType("decimal(2,1)");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Until")
                        .HasColumnType("datetime2");

                    b.HasKey("UniqueId");

                    b.ToTable("WT_BattleRatings");
                });

            modelBuilder.Entity("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.WtClan", b =>
                {
                    b.Property<int>("UniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UniqueId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UniqueId");

                    b.ToTable("WT_Clans");
                });

            modelBuilder.Entity("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.WtClanMatch", b =>
                {
                    b.Property<int>("ClanId")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.HasKey("ClanId", "MatchId");

                    b.HasIndex("MatchId");

                    b.ToTable("WT_ClanMatch");
                });

            modelBuilder.Entity("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.WtClanPlayer", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("ClanId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("datetime2");

                    b.HasKey("PlayerId", "ClanId");

                    b.HasIndex("ClanId");

                    b.ToTable("WT_ClanPlayers");
                });

            modelBuilder.Entity("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.WtMatch", b =>
                {
                    b.Property<int>("UniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UniqueId"));

                    b.Property<int>("BattleRatingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MatchStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("Result")
                        .HasColumnType("int");

                    b.HasKey("UniqueId");

                    b.HasIndex("BattleRatingId");

                    b.ToTable("WT_Matches");
                });

            modelBuilder.Entity("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.WtNation", b =>
                {
                    b.Property<int>("UniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UniqueId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UniqueId");

                    b.ToTable("WT_Nations");
                });

            modelBuilder.Entity("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.WtPlayer", b =>
                {
                    b.Property<int>("UniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UniqueId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UniqueId");

                    b.ToTable("WT_Players");
                });

            modelBuilder.Entity("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.WtVehicle", b =>
                {
                    b.Property<int>("UniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UniqueId"));

                    b.Property<int>("NationId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("UniqueId");

                    b.HasIndex("NationId");

                    b.HasIndex("RoleId");

                    b.HasIndex("TypeId");

                    b.ToTable("WT_Vehicles");
                });

            modelBuilder.Entity("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.WtVehiclePlayerMatch", b =>
                {
                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.HasKey("VehicleId", "PlayerId", "MatchId");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId");

                    b.ToTable("WT_VehiclePlayerMatches");
                });

            modelBuilder.Entity("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.WtVehicleRole", b =>
                {
                    b.Property<int>("UniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UniqueId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UniqueId");

                    b.ToTable("WT_VehicleRoles");
                });

            modelBuilder.Entity("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.WtVehicleType", b =>
                {
                    b.Property<int>("UniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UniqueId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UniqueId");

                    b.ToTable("WT_VehicleTypes");
                });

            modelBuilder.Entity("ApplicationRolePermission", b =>
                {
                    b.HasOne("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.WtClanMatch", b =>
                {
                    b.HasOne("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.WtClan", "Clan")
                        .WithMany("WtClanMatch")
                        .HasForeignKey("ClanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.WtMatch", "Match")
                        .WithMany("WtClanMatch")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clan");

                    b.Navigation("Match");
                });

            modelBuilder.Entity("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.WtClanPlayer", b =>
                {
                    b.HasOne("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.WtClan", "Clan")
                        .WithMany("WtClanPlayers")
                        .HasForeignKey("ClanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.WtPlayer", "Player")
                        .WithMany("WtClanPlayers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clan");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.WtMatch", b =>
                {
                    b.HasOne("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.WtBattleRating", "BattleRating")
                        .WithMany("WtMatches")
                        .HasForeignKey("BattleRatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BattleRating");
                });

            modelBuilder.Entity("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.WtVehicle", b =>
                {
                    b.HasOne("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.WtNation", "Nation")
                        .WithMany("WtVehicles")
                        .HasForeignKey("NationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.WtVehicleRole", "Role")
                        .WithMany("WtVehicles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.WtVehicleType", "Type")
                        .WithMany("WtVehicles")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nation");

                    b.Navigation("Role");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.WtVehiclePlayerMatch", b =>
                {
                    b.HasOne("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.WtMatch", "Match")
                        .WithMany("WtVehiclePlayerMatches")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.WtPlayer", "Player")
                        .WithMany("WtVehiclePlayerMatches")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.WtVehicle", "Vehicle")
                        .WithMany("WtVehiclePlayerMatches")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Player");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.WtBattleRating", b =>
                {
                    b.Navigation("WtMatches");
                });

            modelBuilder.Entity("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.WtClan", b =>
                {
                    b.Navigation("WtClanMatch");

                    b.Navigation("WtClanPlayers");
                });

            modelBuilder.Entity("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.WtMatch", b =>
                {
                    b.Navigation("WtClanMatch");

                    b.Navigation("WtVehiclePlayerMatches");
                });

            modelBuilder.Entity("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.WtNation", b =>
                {
                    b.Navigation("WtVehicles");
                });

            modelBuilder.Entity("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.WtPlayer", b =>
                {
                    b.Navigation("WtClanPlayers");

                    b.Navigation("WtVehiclePlayerMatches");
                });

            modelBuilder.Entity("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.WtVehicle", b =>
                {
                    b.Navigation("WtVehiclePlayerMatches");
                });

            modelBuilder.Entity("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.WtVehicleRole", b =>
                {
                    b.Navigation("WtVehicles");
                });

            modelBuilder.Entity("WtSbAssistant.Core.DataAccess.DatabaseAccess.Entities.WtVehicleType", b =>
                {
                    b.Navigation("WtVehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
